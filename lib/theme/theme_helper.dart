import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.onError,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(22),
          ),
          shadowColor: colorScheme.primary.withOpacity(0.15),
          elevation: 1,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.green900,
            width: 1,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(2),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return appTheme.red60002;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return appTheme.red60002;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.blueGray10001.withOpacity(0.5),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: Colors.white,
          fontSize: 16.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray70001,
          fontSize: 14.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray70001,
          fontSize: 12.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        displaySmall: TextStyle(
          color: Color(0XFF000000),
          fontSize: 36.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        headlineLarge: TextStyle(
          color: colorScheme.primary.withOpacity(1),
          fontSize: 30.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w700,
        ),
        headlineMedium: TextStyle(
          color: colorScheme.primary,
          fontSize: 26.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.primary,
          fontSize: 24.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        labelLarge: TextStyle(
          color: colorScheme.primary.withOpacity(1),
          fontSize: 12.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        titleLarge: TextStyle(
          color: Colors.black,
          fontSize: 20.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: colorScheme.primary.withOpacity(1),
          fontSize: 16.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: appTheme.gray50001,
          fontSize: 14.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFF2CB05),
    primaryContainer: Color(0XFF1D1E20),
    secondaryContainer: Color(0XFF727272),

    // Error colors
    errorContainer: Color(0XFFA6A6A6),
    onError: Color(0XFFFFFFFF),

    // On colors(text colors)
    onPrimary: Colors.black,
    onPrimaryContainer: Color(0XFFB3B3B3),
    onSecondaryContainer: Color(0XFF0A0A0A),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber100 => Color(0XFFFFEABB);
  Color get amber300 => Color(0XFFFFD565);
  Color get amber30001 => Color(0XFFFFD54F);
  Color get amber400 => Color(0XFFFFCE31);
  Color get amber500 => Color(0XFFF7BD02);
  Color get amber50001 => Color(0XFFFDBA16);

  // Black
  Color get black900 => Color(0XFF030303);

  // Blue
  Color get blue200 => Color(0XFF96CCEE);
  Color get blue700 => Color(0XFF3489C6);
  Color get blue800 => Color(0XFF0050C8);

  // BlueGray
  Color get blueGray100 => Color(0XFFD5D5D5);
  Color get blueGray10001 => Color(0XFFD0D0D0);
  Color get blueGray10002 => Color(0XFFD9D9D9);
  Color get blueGray400 => Color(0XFF808488);
  Color get blueGray700 => Color(0XFF455A64);

  // Cyan
  Color get cyan600 => Color(0XFF08B4BF);

  // DeepOrange
  Color get deepOrange100 => Color(0XFFFFC3C5);
  Color get deepOrange200 => Color(0XFFF8B9A6);
  Color get deepOrange20001 => Color(0XFFFFBE9D);
  Color get deepOrange300 => Color(0XFFFF725E);
  Color get deepOrange400 => Color(0XFFFf34D);
  Color get deepOrangeA700 => Color(0XFFE91611);

  // DeepPurpleACc
  Color get deepPurpleA400Cc => Color(0XCC5136F6);

  // Gray
  Color get gray200 => Color(0XFFECECEC);
  Color get gray20001 => Color(0XFFE8E8E8);
  Color get gray300 => Color(0XFFE0E0E0);
  Color get gray30001 => Color(0XFFE8E8E3);
  Color get gray400 => Color(0XFFC4C4C4);
  Color get gray50 => Color(0XFFFFFDF8);
  Color get gray500 => Color(0XFFC49094);
  Color get gray50001 => Color(0XFFA1A1A1);
  Color get gray5001 => Color(0XFFF8F8F8);
  Color get gray600 => Color(0XFF828282);
  Color get gray60001 => Color(0XFF717171);
  Color get gray60002 => Color(0XFF7F7F7F);
  Color get gray700 => Color(0XFF5C5C5C);
  Color get gray70001 => Color(0XFF606060);
  Color get gray900 => Color(0XFF282828);
  Color get gray90001 => Color(0XFF232327);

  // Green
  Color get green50 => Color(0XFFE7FFE3);
  Color get green900 => Color(0XFF157B11);
  Color get greenA100 => Color(0XFFC4F8C2);
  Color get greenA700 => Color(0XFF08BF1B);
  Color get greenA70001 => Color(0XFF00C813);

  // LightGreen
  Color get lightGreenA700 => Color(0XFF2DC414);

  // Orange
  Color get orange200 => Color(0XFFF7BF75);
  Color get orange50 => Color(0XFFFFF3D5);
  Color get orange5001 => Color(0XFFFFF7E3);
  Color get orange600 => Color(0XFFFF8A00);
  Color get orangeA70019 => Color(0X19FF6B00);

  // Pink
  Color get pinkA200 => Color(0XFFFF5C76);

  // Purple
  Color get purple900 => Color(0XFF5F0D86);
  Color get primaryPurple => Color(0xff6750A4);

  Color get primaryBlue => Color(0xff04198C);

  // PurpleACc
  Color get purpleA700Cc => Color(0XCCA40FD8);

  // Red
  Color get red300 => Color(0XFFB5815E);
  Color get red30066 => Color(0X66EE6F74);
  Color get red50 => Color(0XFFFFF0ED);
  Color get red5001 => Color(0XFFFFF0E9);
  Color get primaryYellow => Color(0XFFF2CB05);
  Color get red60001 => Color(0XFFE13437);
  Color get red60002 => Color(0XFFE1353C);
  Color get redA200 => Color(0XFFF94060);
  Color get redA700 => Color(0XFFFF0000);

  // RedE
  Color get red700E5 => Color(0XE5DE1F27);

  // Yellow
  Color get yellow100 => Color(0XFFFFF1CC);

  Color get pageBg => Color(0xffE4DABA);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
